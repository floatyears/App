package config

import (
	"common/EC"
	"common/consts"
	"common/log"
	"data"
	"common/Error"
	"code.google.com/p/goprotobuf/proto"
	"bbproto"
	"github.com/garyburd/redigo/redis"
)

var TableUnitExpType = make([]int32, 99)
var TableDevourCostCoin = make([]int32, 99)
//var TableUserRankExp = make([]int32, consts.N_MAX_USER_RANK)
var TableUserRankExp = []int32{
	0,12,29,57,85,133,200,286,401,573,758,1022,1310,1643,2010,2403,2838,3316,3842,4390,4992,5643,6323,7051,7823,8638,
	9507,10397,11334,12319,13353,14437,15570,16754,17989,19276,20616,22009,23456,24957,26513,28124,29791,31515,33296,
	35134,37030,38985,40999,43073,45207,47401,49656,51973,54352,56793,59297,61865,64496,67192,69952,72778,75669,78626,
	81650,84740,87898,91123,94417,97779,101210,104710,108280,111920,115631,119412,123264,127188,131184,135252,139393,
	143607,147895,152257,156693,161203,165788,170449,175185,179997,184885,189850,194892,200011,205208,210483,215836,221268,
	226779,232369,238039,243789,249619,255529,261520,267592,273746,279982,286300,292700,299183,305749,312398,319131,325948,
	332849,339835,346905,354061,361302,368629,376042,383541,391126,398798,406557,414404,422338,430360,438471,446670,454958,
	463335,471801,480357,489003,497739,506565,515482,524490,533589,542779,552061,561435,570901,580460,590111,599855,609693,
	619624,629649,639768,649981,660289,670691,681188,691781,702469,713253,724133,735109,746181,757354,768616,779979,791440,
	802998,814654,826408,838261,850212,862262,874411,886659,899007,911455,924003,936651,949399,962248,975198,988249,1001401,
	1014655,1028039,1041468,1055028,1068690,1082455,1096323,1110294,1124368,1138546,1152828,1167213,1181703,1196297,1210996,
	1225800,1240709,1255723,1270842,1286067,1301398,1316835,1332378,1348028,1363785,1379648,1395618,1411696,1427881,1444174,
	1460575,1477084,1493702,1510428,1527263,1544207,1561260,1578422,1595694,1613076,1630568,1648170,1665882,1683705,1701639,
	1719683,1737838,1756105,1774483,1792973,1811575,1830289,1849115,1868054,1887106,1906271,1925549,1944940,1964444,1984062,
	2003794,2023640,2043600,2063674,2083863,2104167,2124586,2145120,2165769,2186533,2207413,2228409,2249522,2270750,2292095,
	2313556,2335134,2356829,2378641,2400570,2422617,2444782,2467064,2489465,2511984,2534621,2557377,2580251,2603244,2626356,
	2649588,2672939,2696410,2720000,2743710,2767541,2791492,2815563,2839755,2864068,2888502,2913057,2937733,2962531,2987450,
	3012491,3037654,3062940,3088348,3113878,3139531,3165307,3191206,3217228,3243374,3269643,3296036,3322472,3348989,3375630,
	3429284,3456298,3483437,3510700,3538088,3565602,3593241,3621006,3648896,3676912,3705054,3733322,3761716,3790237,3818884,
	3847658,3876559,3905587,3934743,3964026,3993437,4022975,4052641,4082435,4112358,4142409,4172589,4202897,4233334,4263900,
	4294595,4325420,4356374,4387458,4418672,4450015,4481488,4513092,4544826,4576691,4608686,4640812,4673069,4705457,4737977,
	4770628,4803411,4836326,4869373,4902552,4935863,4969306,5002882,5036590,5070431,5104405,5138512,5172753,5207127,5241635,
	5276276,5311051,5345960,5381003,5416181,5451493,5486940,5522521,5558237,5594088,5630074,5666196,5702414,5738729,5775140,
	5811648,5848252,5884952,5921749,5958642,5995632,6032718,6069901,6107180,6144555,6182027,6219595,6257260,6295021,6332879,
	6370833,6408883,6447030,6485273,6523613,6562049,6600582,6639211,6677936,6716758,6755676,6794691,6833802,6873010,6912314,
	6951714,6991211,7030804,7070494,7110280,7150163,7190142,7230217,7270389,7310657,7351022,7391483,7432041,7472695,7513445,
	7554292,7595235,7636275,7677411,7718644,7759973,7801398,7842920,7884538,7926253,7968064,8009972,8051976,8094076,8136273,
	8178566,8220956,8263442,8306025,8348704,8391479,8434351,8477319,8520384,8563545,8606803,8650157,8693607,8737154,8780797,
	8824537,8868373,8912306,8956335,9000460,9044682,9089000,9133415,9177926,9222534,9267238,9312038,9356935,9401928,9447018,
	9492204,9537487,9582866,9628341,9673913,9719581,9765346,9811207,9857165,9903219,9949369,9995616,10041959,10088399,10134935,
	10181568,10228297,10275122,10322044,10369062,10416177,10463388,10510696,10558100,10605600,10653197,10700890,10748680,
	10796566,10844549,10892628,10940803,
}

var GUnitInfoList = make(map[uint32]*bbproto.UnitInfo)

var TableUnitMax = []int32 {20,20,20,20,20,25,25,25,25,25,30,30,30,30,30,35} //16 ranks

var TableFriendMax = []int32 {20,20,20,21,21,21,22,22,22,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,
	32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,
	47,47,47,48,48,48,49,49,49,50} //67 ranks

var TableCostMax = []int32 {
	20,22,22,22,24,24,24,26,26,26,28,28,28,30,30,30,32,32,32,37,37,37,39,39,39,41,41,41,43,43,
	43,45,45,45,47,47,47,49,49,49,51,51,51,53,53,53,55,55,55,60,60,60,62,62,62,64,64,64,66,66,
	66,68,68,68,70,70,70,72,72,77,77,79,79,81,81,83,83,85,85,90,90,92,92,94,94,96,96,98,98,103,
	103,105,105,107,107,109,109,111,111,116,116,118,118,120,120,122,122,124,124,126,126,128,128,
	130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,
	152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,
	176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,
	198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,
	222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,
	244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,
	268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,
	290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,306,306,308,308,310,310,312,312,314,314,316,316,318,318,
	320,320,322,322,324,324,326,326,328,328,330,330,332,332,334,334,336,336,338,338,340,340,342,342,344,344,346,346,348,
	348,350,350,352,352,354,354,356,356,358,358,360,360,362,362,364,364,366,366,368,368,370,370,372,372,374,374,376,376,
	378,378,380,380,382,382,384,384,386,386,388,388,390,390,392,392,394,394,396,396,398,398,400,400,402,402,404,404,406,
	406,408,408,410,410,412,412,414,414,416,416,418,418,420,420,422,422,424,424,426,426,428,428,430,430,432,432,434,434,
	436,436,438,438,440,440,442,442,444,444,446,446,448,448,450,450,452,452,454,454,456,456,458,458,460,460,462,462,464,
	464,466,466,468,468,470,470,472,472,474,474,476,476,478,478,480,480,482,482,484,484,486,486,488,488,490,490,492,492,
	494,494,496,496,498,498,500,500,502,502,504,504,506,506,508,508,510,510,512,512,514,514,516,
} //500 ranks

var TableStaminaMax = []int32 {
	20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,34,34,34,35,35,35,36,36,36,37,
	37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,48,48,48,49,49,49,50,50,50,51,51,52,52,53,53,54,54,55,55,
	56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,
	75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,
	95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,
	111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,
	125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,
	140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,
	154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168, 
	169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,
	183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,
	198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,
	212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,224,225,225,226,226,
	227,227,228,228,229,229,230,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,239,239,240,240,241,
	241,242,242,243,243,244,244,245,245,246,246,247,247,248,248,249,249,250,250,251,251,252,252,253,253,254,254,255,255,
	256,256,257,257,258,258,259,259,260,260,261,261,262,262,263,263,264,264,265,265,266,266,
} //500 ranks


func InitConfig()  (e Error.Error) {
	for i := int32(0); i < 99; i++ {
		TableUnitExpType[i] = 100 * ((i + 1) * (i + 1) / 3)
		if TableUnitExpType[i] == 0 {
			TableUnitExpType[i] = 10
		}
		log.T("TableUnitExpType[%v]=%v",i, TableUnitExpType[i])
	}

	for i := int32(0); i < 99; i++ {
		TableDevourCostCoin[i] = 100 * (i + 1)
	}

//	for i := int32(0); i < consts.N_MAX_USER_RANK; i++ {
//		TableUserRankExp[i] = 100 * (i + 1)
//	}

	if e = LoadUnitInfoConfig(); e.IsError() {
		log.Error("LoadUnitInfoConfig failed.")
		return e
	}

	return Error.OK()
}

func LoadUnitInfoConfig() (e Error.Error) {

	db := &data.Data{}
	err := db.Open(consts.TABLE_UNIT)
	defer db.Close()
	if err != nil {
		return Error.New(EC.READ_DB_ERROR, err)
	}

	keys, err := db.GetKeys(consts.X_UNIT_INFO + "*")
	if err != nil {
		log.Error("LoadUnitInfoConfig  ret err:%v", err)
		return Error.New(EC.READ_DB_ERROR, err.Error())
	}

	if len(keys) == 0 {
		log.Error("LoadUnitInfoConfig  ret no data.")
		return Error.New(EC.DATA_NOT_EXISTS)
	}

	unitIds := redis.Args{}
	for _, unitId := range keys {
		unitIds = unitIds.Add( unitId )
//		log.T("loop add unitId: %v", unitId)
	}

	unitInfos, err := db.MGet( unitIds )
	if err != nil {
		log.Error("LoadUnitInfoConfig db.MGet ret err:%v", err)
		return Error.New(EC.READ_DB_ERROR, err)
	}
//	log.T("db.MGet( unitIds ) ret data count:%v", len(unitInfos))

	for _, uinfo := range unitInfos {
		if uinfo == nil {
			continue
		}

		zData, err := redis.Bytes(uinfo, err)
		if err == nil && len(zData) > 0 {
			unit := &bbproto.UnitInfo{}
			if err = proto.Unmarshal(zData, unit); err != nil {
				log.Error(" Cannot Unmarshal userinfo(err:%v) userinfo: %v", err, uinfo)
				return Error.New(EC.UNMARSHAL_ERROR,err)
			}

			GUnitInfoList[*unit.Id] = unit
		} else {
			return Error.New("redis.Bytes(uinfo, err) fail.")
		}
	}

	log.T("Load ret all UnitInfo:")
	for k, unit:= range GUnitInfoList {
		log.T("[%v], %+v", k, unit)
	}
	log.T("==========Load UnitInfo ret total count: %v ==========", len(GUnitInfoList))

	return Error.OK()
}

func GetUserRankExp(rank int32) int32 {
	if rank > consts.N_MAX_USER_RANK {
		rank = consts.N_MAX_USER_RANK
	}

	return TableUserRankExp[rank-1]
}

func GetCostMax(rank int32) int32 {
	if rank < 1 || rank > consts.N_MAX_USER_RANK {
		log.Error("GetCostMax :: invalid rank:%v", rank)
		return -1
	}
	return TableCostMax[rank-1]
}

func GetUnitMax(rank int32) int32 {
	if rank > 16 {
		rank = 16
	}
	return TableUnitMax[rank-1]
}

func GetFriendMax(rank int32) int32 {
	if rank > 67 {
		rank = 67
	}
	return TableFriendMax[rank-1]
}

func GetStaminaMax(rank int32) int32 {
	if rank > consts.N_MAX_USER_RANK {
		rank = consts.N_MAX_USER_RANK
	}
	return TableStaminaMax[rank-1]
}
