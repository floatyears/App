package config

import (
	"common/EC"
	"common/consts"
	"common/log"
	"data"
	"common/Error"
	"code.google.com/p/goprotobuf/proto"
	"bbproto"
	"github.com/garyburd/redigo/redis"
)

var TableUnitExpType = make([]int32, 99)
var TableDevourCostCoin = make([]int32, 99)
//var TableUserRankExp = make([]int32, consts.N_MAX_USER_RANK)
var TableUserRankExp = []int32 {
	0,12,17,28,28,48,67,86,115,172,185,264,288,333,367,393,435,478,526,548,602,651,680,728,772,815,869,890,937,985,1034,
	1084,1133,1184,1235,1287,1340,1393,1447,1501,1556,1611,1667,1724,1781,1838,1896,1955,2014,2074,2134,2194,2255,2317,
	2379,2441,2504,2568,2631,2696,2760,2826,2891,2957,3024,3090,3158,3225,3294,3362,3431,3500,3570,3640,3711,3781,3852,
	3924,3996,4068,4141,4214,4288,4362,4436,4510,4585,4661,4736,4812,4888,4965,5042,5119,5197,5275,5353,5432,5511,5590,
	5670,5750,5830,5910,5991,6072,6154,6236,6318,6400,6483,6566,6649,6733,6817,6901,6986,7070,7156,7241,7327,7413,7499,
	7585,7672,7759,7847,7934,8022,8111,8199,8288,8377,8466,8556,8646,8736,8826,8917,9008,9099,9190,9282,9374,9466,9559,
	9651,9744,9838,9931,10025,10119,10213,10308,10402,10497,10593,10688,10784,10880,10976,11072,11173,11262,11363,11461,
	11558,11656,11754,11853,11951,12050,12149,12248,12348,12448,12548,12648,12748,12849,12950,13051,13152,13254,13384,
	13429,13560,13662,13765,13868,13971,14074,14178,14282,14385,14490,14594,14699,14804,14909,15014,15119,15225,15331,
	15437,15543,15650,15757,15863,15970,16078,16185,16293,16401,16509,16618,16726,16835,16944,17053,17162,17272,17382,
	17492,17602,17712,17823,17934,18044,18155,18267,18378,18490,18602,18714,18826,18939,19052,19165,19278,19391,19504,
	19618,19732,19846,19960,20074,20189,20304,20419,20534,20649,20764,20880,20996,21113,21228,21345,21461,21578,21695,
	21812,21929,22047,22165,22282,22401,22519,22637,22756,22874,22993,23112,23232,23351,23471,23590,23710,23831,23951,
	24071,24192,24313,24434,24555,24676,24798,24919,25041,25163,25286,25408,25530,25653,25776,25899,26022,26146,26269,
	26393,26436,26517,26641,53654,27014,27139,27263,27388,27514,27639,27765,27890,28016,28142,28268,28394,28521,28647,
	28774,28901,29028,29156,29283,29411,29538,29666,29794,29923,30051,30180,30308,30437,30566,30695,30825,30954,31084,
	31214,31343,31473,31604,31734,31865,31995,32126,32257,32388,32520,32651,32783,32915,33047,33179,33311,33443,33576,
	33708,33841,33974,34107,34241,34374,34508,34641,34775,34909,35043,35178,35312,35447,35581,35716,35851,35986,36122,
	36218,36315,36411,36508,36604,36700,36797,36893,36990,37086,37183,37279,37375,37472,37568,37665,37761,37858,37954,
	38050,38147,38243,38340,38436,38533,38629,38725,38822,38918,39015,39111,39208,39304,39400,39497,39593,39690,39786,
	39883,39979,40075,40172,40268,40365,40461,40558,40654,40750,40847,40943,41040,41136,41233,41329,41425,41522,41618,
	41715,41811,41908,42004,42100,42197,42293,42390,42486,42583,42679,42775,42872,42968,43065,43161,43258,43354,43450,
	43547,43643,43740,43836,43933,44029,44125,44222,44318,44415,44511,44608,44704,44800,44897,44993,45090,45186,45283,
	45379,45475,45572,45668,45765,45861,45958,46054,46150,46247,46343,46440,46536,46633,46729,46825,46922,47018,47115,
	47211,47308,47404,47500,47597,47693,47790,47886,47983,48079,48175,
}

var GUnitInfoList = make(map[uint32]*bbproto.UnitInfo)

var TableUnitMax = []int32 {20,20,20,20,20,25,25,25,25,25,30,30,30,30,30,35} //16 ranks

var TableFriendMax = []int32 {20,20,20,21,21,21,22,22,22,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,
	32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,
	47,47,47,48,48,48,49,49,49,50} //67 ranks

var TableCostMax = []int32 {
	20,22,22,22,24,24,24,26,26,26,28,28,28,30,30,30,32,32,32,37,37,37,39,39,39,41,41,41,43,43,
	43,45,45,45,47,47,47,49,49,49,51,51,51,53,53,53,55,55,55,60,60,60,62,62,62,64,64,64,66,66,
	66,68,68,68,70,70,70,72,72,77,77,79,79,81,81,83,83,85,85,90,90,92,92,94,94,96,96,98,98,103,
	103,105,105,107,107,109,109,111,111,116,116,118,118,120,120,122,122,124,124,126,126,128,128,
	130,130,132,132,134,134,136,136,138,138,140,140,142,142,144,144,146,146,148,148,150,150,152,
	152,154,154,156,156,158,158,160,160,162,162,164,164,166,166,168,168,170,170,172,172,174,174,
	176,176,178,178,180,180,182,182,184,184,186,186,188,188,190,190,192,192,194,194,196,196,198,
	198,200,200,202,202,204,204,206,206,208,208,210,210,212,212,214,214,216,216,218,218,220,220,
	222,222,224,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,
	244,246,246,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,266,266,
	268,268,270,270,272,272,274,274,276,276,278,278,280,280,282,282,284,284,286,286,288,288,290,
	290,292,292,294,294,296,296,298,298,300,300,302,302,304,304,306,306,308,308,310,310,312,312,314,314,316,316,318,318,
	320,320,322,322,324,324,326,326,328,328,330,330,332,332,334,334,336,336,338,338,340,340,342,342,344,344,346,346,348,
	348,350,350,352,352,354,354,356,356,358,358,360,360,362,362,364,364,366,366,368,368,370,370,372,372,374,374,376,376,
	378,378,380,380,382,382,384,384,386,386,388,388,390,390,392,392,394,394,396,396,398,398,400,400,402,402,404,404,406,
	406,408,408,410,410,412,412,414,414,416,416,418,418,420,420,422,422,424,424,426,426,428,428,430,430,432,432,434,434,
	436,436,438,438,440,440,442,442,444,444,446,446,448,448,450,450,452,452,454,454,456,456,458,458,460,460,462,462,464,
	464,466,466,468,468,470,470,472,472,474,474,476,476,478,478,480,480,482,482,484,484,486,486,488,488,490,490,492,492,
	494,494,496,496,498,498,500,500,502,502,504,504,506,506,508,508,510,510,512,512,514,514,516,
} //500 ranks

var TableStaminaMax = []int32 {
	20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,34,34,34,35,35,35,36,36,36,37,
	37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,48,48,48,49,49,49,50,50,50,51,51,52,52,53,53,54,54,55,55,
	56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,
	75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,
	95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,
	111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,
	125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,
	140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,
	154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168, 
	169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,
	183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,
	198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,
	212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,224,225,225,226,226,
	227,227,228,228,229,229,230,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,239,239,240,240,241,
	241,242,242,243,243,244,244,245,245,246,246,247,247,248,248,249,249,250,250,251,251,252,252,253,253,254,254,255,255,
	256,256,257,257,258,258,259,259,260,260,261,261,262,262,263,263,264,264,265,265,266,266,
} //500 ranks


func InitConfig()  (e Error.Error) {
	for i := int32(0); i < 99; i++ {
		TableUnitExpType[i] = 100 * ((i + 1) * (i + 1) / 3)
		if TableUnitExpType[i] == 0 {
			TableUnitExpType[i] = 10
		}
		log.T("TableUnitExpType[%v]=%v",i, TableUnitExpType[i])
	}

	for i := int32(0); i < 99; i++ {
		TableDevourCostCoin[i] = 100 * (i + 1)
	}

//	for i := int32(0); i < consts.N_MAX_USER_RANK; i++ {
//		TableUserRankExp[i] = 100 * (i + 1)
//	}

	if e = LoadUnitInfoConfig(); e.IsError() {
		log.Error("LoadUnitInfoConfig failed.")
		return e
	}

	return Error.OK()
}

func LoadUnitInfoConfig() (e Error.Error) {

	db := &data.Data{}
	err := db.Open(consts.TABLE_UNIT)
	defer db.Close()
	if err != nil {
		return Error.New(EC.READ_DB_ERROR, err)
	}

	keys, err := db.GetKeys(consts.X_UNIT_INFO + "*")
	if err != nil {
		log.Error("LoadUnitInfoConfig  ret err:%v", err)
		return Error.New(EC.READ_DB_ERROR, err.Error())
	}

	if len(keys) == 0 {
		log.Error("LoadUnitInfoConfig  ret no data.")
		return Error.New(EC.DATA_NOT_EXISTS)
	}

	unitIds := redis.Args{}
	for _, unitId := range keys {
		unitIds = unitIds.Add( unitId )
//		log.T("loop add unitId: %v", unitId)
	}

	unitInfos, err := db.MGet( unitIds )
	if err != nil {
		log.Error("LoadUnitInfoConfig db.MGet ret err:%v", err)
		return Error.New(EC.READ_DB_ERROR, err)
	}
//	log.T("db.MGet( unitIds ) ret data count:%v", len(unitInfos))

	for _, uinfo := range unitInfos {
		if uinfo == nil {
			continue
		}

		zData, err := redis.Bytes(uinfo, err)
		if err == nil && len(zData) > 0 {
			unit := &bbproto.UnitInfo{}
			if err = proto.Unmarshal(zData, unit); err != nil {
				log.Error(" Cannot Unmarshal userinfo(err:%v) userinfo: %v", err, uinfo)
				return Error.New(EC.UNMARSHAL_ERROR,err)
			}

			GUnitInfoList[*unit.Id] = unit
		} else {
			return Error.New("redis.Bytes(uinfo, err) fail.")
		}
	}

	log.T("Load ret all UnitInfo:")
	for k, unit:= range GUnitInfoList {
		log.T("[%v], %+v", k, unit)
	}
	log.T("==========Load UnitInfo ret total count: %v ==========", len(GUnitInfoList))

	return Error.OK()
}

func GetUserRankExp(rank int32) int32 {
	if rank > consts.N_MAX_USER_RANK {
		rank = consts.N_MAX_USER_RANK
	}

	return TableUserRankExp[rank-1]
}

//return user rank by exp (in total)
func GetRankByExp(exp int32) (rank int32) {
	totalExp := int32(0)
	for rank:=int32(1); rank < consts.N_MAX_USER_RANK; rank++{
		totalExp += GetUserRankExp(rank)
		if totalExp >= exp {
			log.T("GetRankByExp( exp=%v) return new rank=%v.", exp, rank)
			return rank
		}
	}
	return 1
}

//return total exp by rank
func GetTotalRankExp(rank int32) (totalExp int32) {
	totalExp = int32(0)
	for r:=int32(1); r <= rank; r++{
		//log.T("GetUserRankExp(%v)=%v",rank, GetUserRankExp(r))
		totalExp += GetUserRankExp(r)
	}
	return totalExp
}

func GetCostMax(rank int32) int32 {
	if rank < 1 || rank > consts.N_MAX_USER_RANK {
		log.Error("GetCostMax :: invalid rank:%v", rank)
		return -1
	}
	return TableCostMax[rank-1]
}

func GetUnitMax(rank int32) int32 {
	if rank > 16 {
		rank = 16
	}
	return TableUnitMax[rank-1]
}

func GetFriendMax(rank int32) int32 {
	if rank > 67 {
		rank = 67
	}
	return TableFriendMax[rank-1]
}

func GetStaminaMax(rank int32) int32 {
	if rank > consts.N_MAX_USER_RANK {
		rank = consts.N_MAX_USER_RANK
	}
	return TableStaminaMax[rank-1]
}
