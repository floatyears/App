import public "base.proto";
import public "skill.proto";

package bbproto;

message UnitResource { 
	required uint32			id			= 1;
	optional string			path		= 2; // resource download path
	optional int32			size		= 3; // resource size in bytes
    repeated string         fileName    = 4; // file name list
    optional int32          version     = 5; // file version
}

message UserUnit {  //unit instance
	required uint32 uniqueId			= 1;
	optional uint32 unitId				= 2;
	optional int32 exp					= 3;
	optional int32 level				= 4;
	optional int32 activeSkillLevel		= 5; 
	optional int32 addAttack			= 6;
	optional int32 addDefence			= 7;
	optional int32 addHp				= 8;
	optional int32 limitbreakLv			= 9;
	optional uint32 getTime				= 10;
	optional int32	isFavorite			= 11;
}

message UnitInfo { 	
	required uint32			id				= 1;
	optional string			name			= 2;
	optional EUnitRace		race			= 3;	
	optional EUnitType		type			= 4;//wind flame water, etc.
	optional int32			rare			= 5;	
	optional int32			skill1			= 6;
	optional int32			skill2			= 7;
	optional int32			leaderSkill		= 8;
	optional int32			activeSkill		= 9;
	optional int32			passiveSkill	= 10;
	optional int32			maxLevel		= 11;
	optional string			profile			= 12;
	optional PowerType		powerType		= 13; //include: hpType,atkType,expType
	optional EvolveInfo		evolveInfo		= 14;
	optional int32			cost			= 15;
	optional int32			saleValue		= 16;
	optional int32			devourValue		= 17;
    repeated UnitGetWay		getWay			= 18;
	optional int32			maxActiveSkillLv= 19;
	optional int32			maxStar			= 20; //max star to be evolved
    optional UVPosition		showPos			= 21; //offset for show position
}

message UVPosition {
    optional float			x = 1;
    optional float			y = 2;
    optional float			w = 3;
    optional float			h = 4;
}

message UnitGetWay {
	optional EUnitGetType	getType	= 1; //questId, gachaId...
    optional uint32			getPath	= 2;
}

enum EUnitGetType {
	E_NONE				= 0;
	E_NORMAL_QUEST		= 1;
    E_EVENT_QUEST		= 2;
	E_GACHA_NORMAL		= 3;
	E_GACHA_EVENT		= 4;
	E_BUY				= 5;
    E_BONUS				= 6;
    E_STAGE             = 7;
}

/////////unsed///////////////////////////////////////////////////////////////////
message PowerValue {
	optional int32 level 		= 1; // unit level
	optional int32 value		= 2;
}

message PowerTable {
	repeated PowerValue	 power	= 1; //has one item for each level
}
/////////unsed/////////////////////////////////////////////////////////////////

message PowerInfo {
	optional int32 min			= 1;
	optional int32 max			= 2;
	optional float growCurve	= 3;
}

message PowerType {
	optional PowerInfo	attackType	= 1;
	optional PowerInfo	hpType		= 2;
	optional PowerInfo	expType		= 3;
}

message HelperRequire {
    optional int32		level		= 1;
	optional EUnitRace	race		= 2;
	optional EUnitType	type		= 3;
}

message EvolveInfo {
    required uint32      		evolveUnitId    = 1;
    repeated uint32		      	materialUnitId  = 2;
	optional HelperRequire		helperRequire	= 3;
	optional uint32				evolveQuestId	= 4;
}

enum EGachaType {
	E_FRIEND_GACHA		= 1;
	E_BUY_GACHA			= 2;
	E_BUY_GACHA_EVENT	= 3;
}

message GachaConfig {
	optional int32			gachaId		= 1;
	optional EGachaType		gachaType	= 2; //by friendPoint, by chipï¼Œ by chip(event)
	optional uint32			beginTime	= 3; 
	optional uint32			endTime		= 4; 
	optional int32			eventId		= 5;
    repeated GachaStarInfo  starList    = 6;
}

message GachaUnitList {
    optional int32          minMatch    = 1;
    optional int32          maxMatch    = 2;
    repeated uint32         unitId      = 3;
}

message GachaStarInfo {
    optional int32          starVal     = 1;
    optional int32          minMatch    = 2;
    optional int32          maxMatch    = 3;
    repeated GachaUnitList  unitList    = 4;
}

//=================================================================================================//

message ReqGetUnitResource {
	optional ProtoHeader	header	= 1;
	repeated uint32			unitId	= 2;
}

message RspGetUnitResource {
	optional ProtoHeader	header	= 1;
	optional string			server	= 2; // server address
	repeated UnitResource	unitres	= 3; // unit download path list
}

message ReqGetUserUnit {	// get unit instance info
	optional ProtoHeader	header	= 1;
	repeated uint32			unitId	= 2;
}

message RspGetUserUnit {
	optional ProtoHeader	header	= 1;
	repeated UserUnit		unit	= 2;
}

message ReqLevelUp {	
	optional ProtoHeader	header			= 1;
	optional uint32			baseUniqueId	= 2;
	repeated uint32			partUniqueId	= 3;
	optional uint32			helperUserId	= 4; 
	optional UserUnit		helperUnit		= 5;
	optional int32			helperPremium	= 6;
}

message RspLevelUp {
	optional ProtoHeader	header			= 1;
	repeated UserUnit		unitList		= 2; // not used
	optional UserUnit		baseUnit		= 3;
	optional int32			money			= 4;
	optional uint32			blendUniqueId	= 5;
	optional int32			blendExp		= 6;
	repeated uint32			partUniqueId	= 7;
    optional int32			friendPoint	    = 8; // total points
    optional int32			gotFriendPoint	= 9; // got points
}


message ReqEvolveStart {	
	optional ProtoHeader	header			= 1;
	optional uint32			baseUniqueId	= 2;
	repeated uint32			partUniqueId	= 3;
	optional uint32			helperUserId	= 4;
	optional UserUnit		helperUnit		= 5;
	optional int32			helperPremium	= 6;
	optional uint32			evolveQuestId	= 7;
	optional int32			restartNew		= 8;
}

message RspEvolveStart {
	optional ProtoHeader		header			= 1;
	optional int32				staminaNow		= 2; // current stamina
	optional uint32				staminaRecover	= 3; // stamina recover time
	optional QuestDungeonData	dungeonData		= 4;
}

message ReqEvolveDone {	
	optional ProtoHeader	header			= 1;
	optional uint32			questId			= 2; 
	optional uint32			securityKey		= 3; 
	optional int32			getMoney		= 4;
	repeated uint32			getUnit			= 5;
	repeated uint32			hitGrid			= 6;
}

message RspEvolveDone {	
	optional ProtoHeader	header			= 1;
	optional int32			rank			= 2;
	optional int32			rankAdd			= 3;
	optional int32			exp				= 4;
	optional int32			money			= 5;
	optional int32			friendPoint		= 6;
	optional int32			staminaNow		= 7;
	optional int32			staminaMax		= 8;
	optional uint32			staminaRecover	= 9;
	optional int32			gotMoney		= 10;
	optional int32			gotExp			= 11;
	optional int32			gotStone		= 12;
	optional int32			gotFriendPoint	= 13;
	repeated UserUnit		gotUnit			= 14;
	optional UserUnit		evolvedUnit		= 15;
	optional int32			costMaxAdd		= 16;
	optional int32			unitMaxAdd		= 17;
	optional int32			friendMaxAdd	= 18;
	optional int32			staminaMaxAdd	= 19;	
}

message ReqGacha {	
	optional ProtoHeader	header			= 1;
	optional int32			gachaId			= 2;
	optional int32			gachaCount		= 3;
}

message RspGacha {	
	optional ProtoHeader	header			= 1;
	repeated UserUnit		unitList		= 2; // only the gacha got units
	repeated uint32			unitUniqueId	= 3;
	repeated uint32			blankUnitId		= 4;
	optional int32			stone			= 5;
	optional int32			friendPoint		= 6;
}


message ReqSellUnit {	
	optional ProtoHeader	header			= 1;
	repeated uint32			unitUniqueId	= 2;
}	

message RspSellUnit {	
	optional ProtoHeader	header			= 1;
	optional int32			money			= 2;
	optional int32			gotMoney		= 3;
	repeated UserUnit		unitList		= 4;	
}

enum EFavoriteAction {
	ADD_FAVORITE	= 1;
	DEL_FAVORITE	= 2;
}

message ReqUnitFavorite {
	optional ProtoHeader		header			= 1;
	optional uint32				unitUniqueId	= 2;
	optional EFavoriteAction	action			= 3;
}	

message RspUnitFavorite {
	optional ProtoHeader		header			= 1;
	optional uint32				unitUniqueId	= 2;
}

message ReqUserGuideEvolveUnit {
    optional ProtoHeader        header          = 1;
    optional uint32             unitId          = 2;
}

message RspUserGuideEvolveUnit {
    optional ProtoHeader        header          = 1;
    repeated UserUnit           addUnit         = 2;
}
