import public "base.proto";
import public "unit.proto";
import public "user.proto";

package bbproto;


enum EQuestState {
	QS_NEW		= 0;
	QS_QUESTING	= 1;
	QS_CLEARED	= 2;
}

enum ETrapType {
	Move			= 0;
	StateException	= 1;
	ChangeEnvir		= 2;
	Injured			= 3;
}

enum EQuestGridType {
	Q_NONE			= 0;
	Q_TREATURE		= 1;
	Q_ENEMY			= 2;
	Q_TRAP			= 3;
}

enum EGridStar {
	GS_EMPTY			= 0;
	GS_STAR_1			= 1;
	GS_STAR_2			= 2;
	GS_STAR_3			= 3;
	GS_STAR_4			= 4;
	GS_STAR_5			= 5;
	GS_STAR_6			= 6;
	GS_KEY				= 7;
	GS_QUESTION			= 8;
	GS_EXCLAMATION		= 9;
}

message QuestRecord {
	optional uint32			questId		= 1;
	optional uint32			startTime	= 2;
	optional uint32			endTime		= 3;
	repeated UserUnit		dropUnit	= 4;
	optional int32			getExp		= 5;
	optional int32			getMoney	= 6;
	optional EQuestState	state		= 7;
	optional int32		continue_times	= 8; 
	optional int32			playTotal	= 9;
	optional int32			playToday	= 10;
}

//----------------------Quest config data-----------------------------
message NumRange {
	optional int32		min				= 1; 
	optional int32		max				= 2;
}

message ColorPercent {
	optional EUnitType	color			= 1; 
	optional float		percent			= 2;	
}

message StarConfig {
	optional int32			repeat		= 1;
	optional EGridStar		star		= 2; // 1 - 6: star, 0: key, 7: ? 8:!
	optional NumRange		coin		= 3; // tresureBox
	repeated uint32			enemyPool	= 4; // enemyId list
	optional NumRange		enemyNum	= 5;
	repeated uint32			trap		= 6; // trapId
}

message QuestFloorConfig {
	optional int32		version			= 1;
	optional int32		treasureNum		= 2;
	optional int32		trapNum			= 3;
	optional int32		enemyNum		= 4;
	repeated StarConfig stars			= 5; // 1 - 6, !, ?
}

message QuestConfig {
	optional uint32				questId	= 1;
	repeated EnemyInfoConf		boss	= 2;
	repeated EnemyInfoConf		enemys	= 3;
	repeated ColorPercent		colors	= 4;	
	repeated QuestFloorConfig 	floors	= 5;
}

//-------------------------QuestData------------------------------
message EnemyInfo {
	optional uint32		enemyId			= 1;
	optional uint32		unitId			= 2;
	optional EUnitType	type			= 3;
	optional int32		hp				= 4;
	optional int32		attack			= 5;
	optional int32		defense			= 6;
	optional int32		nextAttack		= 7; // next 1, 2, 3 
}

message EnemyInfoConf {
	optional EnemyInfo	enemy			= 1;
	optional uint32		dropUnitId		= 2;
	optional int32		dropUnitLevel	= 3;
	optional float		dropRate		= 4;
	optional float		addHpRate		= 5; // "+" rate
	optional float		addAttackRate	= 6; //
	optional float		addDefenceRate	= 7; // 
}

message DropUnit{
	optional uint32		dropId			= 1;
	optional uint32		unitId			= 2;
	optional int32		level			= 3;
	optional int32		addHp			= 4;
	optional int32		addAttack		= 5;
	optional int32		addDefence		= 6;
}

message QuestGrid {
	optional int32			position	= 1; // grid position
	optional EGridStar		star		= 2; // 1 - 6 star, !, ?
	optional int32			color		= 3; // star color
	optional EQuestGridType	type		= 4; // enemy, coin, enemy, empty
	repeated uint32			enemyId		= 5; // enemy uniqueId list
	repeated uint32			dropId		= 6;
	optional int32			coins		= 7; 
	optional uint32			trapId		= 8; 
}

message QuestFloor {
	repeated QuestGrid	gridInfo		= 1; // 24 grids		
}

message QuestDungeonData {
	optional uint32			questId		= 1; 
	repeated EnemyInfo		boss		= 2; // boss unit
	repeated EnemyInfo		enemys		= 3; // enemy list
	optional bytes			colors		= 4; 
	repeated DropUnit		drop		= 5;
	repeated QuestFloor		floors		= 6; // 1, 2, 3... floors
}

//============== QuestMapData -  client data also used=======================//
message Position {
	optional int32			x = 1;
	optional int32			y = 2;	
};

message QuestInfo {
	required uint32			id			= 1; 
	optional EQuestState	state		= 2; // CLEAR or NEW
	optional int32			no			= 3; // number: 1, 2, 3...
	optional string			name		= 4; // quest name
	optional string			story		= 5; // story description
	optional int32			stamina		= 6; // cost stamina
	optional int32			floor		= 7;		
	optional int32			rewardExp	= 8;
	optional int32			rewardMoney	= 9;
	repeated uint32			bossId		= 10; // boss unitid
	repeated uint32			enemyId		= 11; // enemy unitid
};

enum QuestBoostType {
	QB_BOOST_NONE		= 0;
	QB_BOOST_MONEY		= 1;
	QB_BOOST_EXP		= 2;
	QB_BOOST_DROPRATE	= 3;
	QB_BOOST_DROPPLUS	= 4;
}

message QuestBoost {
	optional QuestBoostType	type	= 1; //money , exp , dropRate, drop+
	optional int32			value	= 2; //2, 3...
}

message StageInfo {
	optional int32			version		= 1;
	optional uint32			id			= 2;	
	optional EQuestState	state		= 3; // CLEAR or NEW
	optional int32			type		= 4; // story or event
	optional string			stageName	= 5; //
	optional string			description	= 6; //	 
	optional uint32			startTime	= 7;	
	optional uint32			endTime		= 8;
	optional QuestBoost		boost		= 9;
	optional Position		pos			= 10; // stage position of the city	
	repeated QuestInfo		quests		= 11; 
};

message CityInfo {
	optional int32		version			= 1;
	optional uint32		id				= 2;	
	optional int32		state			= 3;
	optional string		cityName		= 4; //
	optional string		description		= 5; //
	optional Position	pos				= 6; // city position of the worldmap
	repeated StageInfo	stages			= 7;
};

message WorldMapInfo {
	optional int32		version			= 1;
	optional uint32		id				= 2;	
	repeated CityInfo	citys			= 3;
};

//-------------------------------------------------------------

message ReqStartQuest {
	optional ProtoHeader	header			= 1;
	optional uint32			stageId			= 2; 
	optional uint32			questId			= 3; 
	optional uint32			helperUserId	= 4; 
	optional UserUnit		helperUnit		= 5; 
	optional uint32			currentParty	= 6; 	
}

message RspStartQuest {
	optional ProtoHeader		header			= 1;
	optional int32				staminaNow		= 2; // current stamina
	optional uint32				staminaRecover	= 3; // stamina recover time
	optional QuestDungeonData	dungeonData		= 4;
}

message ReqClearQuest {
	optional ProtoHeader	header 			= 1; 
	optional uint32			questId			= 2; 
	optional uint32			securityKey		= 3; 
	optional uint32			getMoney		= 4;
	repeated UserUnit		getUnit			= 5; //without uniqueId	
	repeated uint32			hitGrid			= 6;
}

message RspClearQuest {
	optional ProtoHeader	header			= 1;
	optional UserInfo		user			= 2;
	optional AccountInfo	acount			= 3;	
	optional uint32			getMoney		= 4;
	optional uint32			getExp			= 5;	
	repeated UserUnit		getUnit			= 6; //with uniqueId 
}

message ReqGetQuestInfo {
	optional ProtoHeader	header 			= 1;
}

message RspGetQuestInfo {
	optional ProtoHeader 	header 			= 1;
	optional uint32			questId			= 2; // 
	optional uint32			currentStatus	= 3; // current quest status
};

//=========== Trap ====================================================================//
message TrapInjuredValue {
	optional int32			trapIndex		= 1;
	optional int32			trapLevel		= 2;
	optional float			trapValue		= 3;
};

message TrapInfo {
	required uint32				trapID		= 1;
	optional ETrapType			trapType	= 2;
	optional int32				valueIndex	= 3;
	repeated TrapInjuredValue	injuredInfo	= 4;
	optional int32				effectType	= 5;
};

