import public "base.proto";
import public "unit.proto";
import public "task.proto";

package bbproto;

message UserInfo {
	optional string		uuid				= 1;
	optional uint32		userId				= 2;
	optional string		userName			= 3;
	optional string		password			= 4;
	optional string		nickName			= 5;
	optional int32		rank				= 6;
	optional int32		exp					= 7;
	optional int32		staminaNow			= 8;
	optional int32		staminaMax			= 9; 
	optional uint32		staminaRecover		= 10;//recover time
	optional int32		friendMax			= 11;
	optional int32		unitMax				= 12;
	optional int32		costMax				= 13;	
	optional UserUnit	unit				= 14; //leader unit
    optional uint32		regTime     		= 15; //user register time
    optional int32      vipLevel            = 16; //vip system
}

message UserInfoDetail {
	optional UserInfo		user				= 1;
	optional AccountInfo	account				= 2;
	optional QuestLog		quest				= 3;
	repeated UserUnit		unitList			= 4;
	optional PartyInfo		party				= 5;
	optional LoginInfo		login				= 6;
	optional QuestClearInfo	questClear          = 7;
	optional bytes			unitFavoriteFlag	= 8;
	optional bytes			haveUnitFlag		= 9;	//got unit
	optional bytes			meetUnitFlag		= 10;	//meet unit
    optional bytes			userGuideFlag		= 11;
    optional int32          flag                = 12;   //1: system generated user
    optional DailyUserOptCnt dailyOptCnt        = 13;   // 每日操作计数
    optional UserTaskInfo   userTaskInfo        = 14;   // 任务系统信息
    optional TotalUserOptCnt totalOptCnt        = 15;   // 总操作计数
    optional UserCopyInfo   copyInfo            = 16;   // 副本信息
}

message MonthCard {
    optional bool           buyFlag             = 1;  // buy or not
    optional uint32         buyTime             = 2;  // xxxx-xx-xx 00:00:00 's utc timestamp
    optional uint32         nextReceiveTime     = 3;  // 下次领取时间（上次领取时间），领取后一日零时
    optional int32          remainCount         = 4;  // 剩余的领取天数
    optional int32          cardType            = 5;  // 卡的类型
}

message AccountInfo {
	optional int32	review						= 1;
	optional int32	payTotal					= 2;
	optional int32	payMonth					= 3;
	optional int32	money						= 4;
	optional int32	stonePay					= 5;
	optional int32	stoneFree					= 6;
	optional int32	stone						= 7;
	optional int32	friendPoint					= 8;
	optional int32	firstSelectNum				= 9;
    optional MonthCard  monthCard               = 10; // 月卡，多次购买累计日期
    optional MonthCard  weekCard                = 11; // 周卡，多次购买累计日期
}

message StageClearItem {
	optional uint32	stageId						= 1;
	optional uint32	questId						= 2;
}

message QuestClearInfo {
	optional StageClearItem		storyClear		= 1;
	repeated StageClearItem		eventClear		= 2;
}

message PartyItem {
	optional int32 unitPos						= 1;
	optional uint32 unitUniqueId				= 2;
}

message UnitParty {
    optional int32      id						= 1;
	repeated PartyItem  items					= 2;
}

message PartyInfo {
	repeated UnitParty		partyList			= 1;
	optional int32			currentParty		= 2;
}

message TerminalInfo {
	optional string	channel						= 1; // app market channel
	optional string	deviceName					= 2; // 
	optional string	uuid						= 3; 
	optional string	os		 					= 4; // android / ios
}

//enum EBonusType{
//    TOTAL_LOGIN = 1;
//    CHAIN_LOGIN = 2;
//    RANK_REACH  = 3;
//    OTHER_EVENT  = 4;
//    WEEK_CARD   = 5;
//    MONTH_CARD  = 6;
//    DAILY_TASK  = 7;
//    ACHIEVE_TASK = 8;
//    STAR = 9;
//}

// 奖励类型
enum EGiftContent {
    COIN            = 1; // 金币
    FRIEND_POINT    = 2; // 友情点数
    UNIT            = 3; // 卡牌
    CHIP            = 4; // 魔法石
    STAMINA         = 5; // 体力
    RANK_EXP        = 6; // 升级经验
}

message GiftItem {
    optional int32      	content				= 1; //coin, friendPoint, unit, chip
    optional int32		    value				= 2; //unitId
    optional int32		    count				= 3; //
}

message BonusInfo {
    optional int32          id                  = 1;
    optional int32          type    			= 2; //chainLogin, totalLogin, RankReach
	optional int32		    matchValue			= 3; //
    optional uint32         validTime           = 4;
    optional string         message				= 5; //optional
    repeated GiftItem       giftItem            = 6;
    optional int32		    enabled 			= 7; // 1:enable 0 disable
    optional int32		    tag					= 8; //
}

message LoginInfo {
	optional int32		loginTotal				= 1; // login times in total
	optional int32		loginChain				= 2;
    optional int32		loginDayTotal			= 3; //login days in total
	optional uint32		lastLoginTime			= 4;
    optional uint32		lastPlayTime            = 5;
    repeated BonusInfo  bonus					= 6;
    optional int32		maxBonusId              = 7;
    repeated int32      onceBonusId	    		= 8; //accepted bonus id for once bonus
}

message PresentInfo {
	optional uint32		id      				= 1;
	optional uint32		sendTime				= 2;
	optional uint32		type					= 3;
	optional uint32		value1					= 4;
	optional uint32		value2					= 5;
	optional string		message					= 6;
}

message SessionInfo {
	optional string		sessionId				= 1;
	optional string		uuid					= 2;
	optional uint32		userId					= 3;
	optional uint32		questId					= 4;
}
//-------------------------------------------------

message ReqGetUserInfo {
	optional ProtoHeader	header				= 1;
	optional uint32			userId				= 2;
}

message RspGetUserInfo {
	optional ProtoHeader	header				= 1;
	optional UserInfo		user				= 2;
}

//-------------------------------------------------
message NoticeItem {
    optional string			title				= 1;
    optional string			message				= 2;
}

message NoticeInfo {
    repeated NoticeItem		items				= 1;
    optional string         gachaNotice         = 2;
}

message ReqAuthUser {
	optional ProtoHeader	header				= 1;
	optional TerminalInfo	terminal			= 2;
	optional uint32			selectRole			= 3;
	optional int32			appVersion			= 4;
}

message RspAuthUser {
	optional ProtoHeader	header				= 1;
	optional UserInfo		user				= 2;
	optional AccountInfo	account				= 3;
	optional QuestLog		quest				= 4;
	repeated UserUnit		unitList			= 5;
	optional PartyInfo		party				= 6;
	optional uint32			serverTime			= 7;
	optional LoginInfo		login				= 8;
	repeated FriendInfo		friends				= 9;
	repeated PresentInfo	present				= 10;
	optional EUnitType		evolveType			= 11;
	optional QuestClearInfo	questClear			= 12;
	optional int32			isNewUser			= 13;
	optional bytes			haveUnitFlag		= 14;
	optional bytes			meetUnitFlag		= 15;
	optional int32			newAppVersion		= 16;
	optional string			appUrl				= 17;
    optional int32			userGuideStep		= 18;
	optional NoticeInfo		notice				= 19;
    repeated StageInfo      eventList           = 20;
    optional StatHelperCount helpCountInfo      = 21;
    repeated VipConf        vipConfList         = 22;
}

//-------------------------------------------------
message ReqLoginPack {
	optional ProtoHeader	header				= 1;
	optional bool			getLogin			= 2;
	optional bool			getFriend			= 3;
	optional bool			getHelper			= 4;
	optional bool			getPresent			= 5;
}

message RspLoginPack {
	optional ProtoHeader	header				= 1;
	optional LoginInfo		login				= 2;
	repeated FriendInfo		friends				= 9;
	repeated PresentInfo	present				= 4;
}

//-------------------------------------------------

message ReqRenameNick {
	optional ProtoHeader	header				= 1;
	optional string			newNickName			= 2;
}

message RspRenameNick {
	optional ProtoHeader	header				= 1;
	optional string			newNickName			= 2;
}

//-------------------------------------------------

message ReqRestoreStamina {
	optional ProtoHeader	header				= 1;
}

message RspRestoreStamina {
	optional ProtoHeader	header				= 1;
	optional int32			staminaNow			= 2; // current stamina
	optional int32			staminaMax			= 3; 	
	optional uint32			staminaRecover		= 4; // stamina recover time
	optional int32			stone				= 5;
    optional int32          usedVipCnt          = 6;
}

//-------------------------------------------------
message ReqChangeParty {
	optional ProtoHeader	header				= 1;
	optional PartyInfo		party				= 2;
}

message RspChangeParty {
	optional ProtoHeader	header				= 1;
}

//-------------------------------------------------
message ReqUnitMaxExpand {
	optional ProtoHeader	header				= 1;
}

message RspUnitMaxExpand {
	optional ProtoHeader	header				= 1;
	optional int32			unitMax				= 2;
	optional int32			stone				= 3;
}

//-------------------------------------------------
message ReqFriendMaxExpand {
	optional ProtoHeader	header				= 1;
}

message RspFriendMaxExpand {
	optional ProtoHeader	header				= 1;
	optional int32			friendMax			= 2;	
	optional int32			stone				= 3;
}

//-------------------------------------------------
message ReqFinishUserGuide {
    optional ProtoHeader	header				= 1;
    optional int32			step				= 2;
}

message RspFinishUserGuide {
	optional ProtoHeader	header				= 1;
    optional int32          nowStep             = 2;
}

message ReqAcceptBonus {
    optional ProtoHeader	header				= 1;
    repeated int32			bonusId				= 2;
}

message RspAcceptBonus {
    optional ProtoHeader	header				= 1;
    optional int32          stone               = 2;
    optional int32          money               = 3;
    optional int32          friendPoint         = 4;
    repeated UserUnit       newUnitList         = 5;
}

message ReqBonusList {
    optional ProtoHeader    header              = 1;
}

message RspBonusList {
    optional ProtoHeader    header              = 1;
    repeated BonusInfo      bonus               = 2;
}

// 用户关卡星级状态
message RspQuestStarList {
    optional ProtoHeader    header              = 1;
    optional UserCopyInfo   copyInfo            = 2;
}

message StatHelperCount {
    optional int32		friendPointGet			= 1; // friend Pt got everyday
    optional int32		helpFriendCount			= 2; // times of help friend
    optional int32		helpHelperCount			= 3; // times of help helper
}

// VIP 配置
message VipConf {
    optional string     vipName                 = 1; // vip Title
    optional int32      vipLevel                = 2; // vip Level
    optional float      payTotal                = 3; // vip payed money
    optional int32      staminaAdd              = 4; // stamina
    optional int32      partyCostAdd            = 5; // cost
    optional int32      dailyReliveCnt          = 6; // relive cnt for 50% free
    optional int32      dailyBuyStaminaCnt      = 7; // player buy stamina count every day
    optional int32      dailyBuyMoneyCnt        = 8; // player buy money count every day
    optional int32      dailyFriendPoint        = 9; // player can get friendPoint every login day
}

// task system
message UserTaskInfo {
    repeated TaskObj     achievedTaskList       = 1; // 已经完成的任务ID列表
    required int32       maxBonusId             = 2; // 最大的奖励ID
    repeated BonusInfo   bonusList				= 3; // 奖励列表
}

// 精英副本与关卡评★
message UserCopyInfo {
    optional CopyPassInfo   normalCopyInfo      = 1; // 普通副本
    optional CopyPassInfo   eliteCopyInfo       = 2; // 精英副本
}

// 每日用户操作计数, 每日第一次登录时清0
message DailyUserOptCnt {
    optional int32       resumeQuestCnt         = 1;  // 重打quest计数
    optional int32       buyStaminaCnt          = 2;  // 购买体力计数
    optional int32       buyMoneyCnt            = 3;  // 购买金币计数
    optional int32       clearQuestCnt          = 4;  // 打任意小关卡次数
    optional int32       friendPointGot         = 5;  // 得到友情点数
    optional int32       friendCnt              = 6;  // 得到好友
    optional int32       powerUpCnt             = 7;  // 强化
    optional int32       evolveCnt              = 8;  // 进化
    optional int32       summonCnt_FP           = 9;  // 友情召唤
    optional int32       summonCnt_Rare         = 10; // 稀有召唤
    optional int32       eventQuestCnt          = 11; // 活动关卡
}

// 用户总的操作计数
message TotalUserOptCnt {
    optional int32       friendCnt              = 1;  // 好友数量(IsFriend)
    optional int32       summonCnt_FP           = 2;  // 友情抽卡次数
    optional int32       summonCnt_FP9          = 3;  // 友情抽卡9连抽次数
    optional int32       summonCnt_Rare         = 4;  // 稀有抽卡次数
    optional int32       summonCnt_Rare9        = 5;  // 稀有抽卡9连抽次数
    optional int32       powerUpCnt             = 6;  // 强化次数
    optional int32       powerUpCnt_Max         = 7;  // 强化到满级次数
    optional int32       evolveCnt              = 8;  // 进化次数
    optional int32       evolveCnt_Max          = 9;  // 进化到满级次数
    optional int32       unitCnt_3              = 10; // 3★卡牌数量
    optional int32       unitCnt_4              = 11; // 4★卡牌数量
    optional int32       unitCnt_5              = 12; // 5★卡牌数量
    optional int32       moneyCnt_Quest         = 13; // 从关卡获得金币数量
    optional int32       friendPointCnt         = 14; // 获得friendPoint数量
    optional int32       eventQuestCnt          = 15; // 活动关卡数量
    optional int32       cityPass               = 16; // 当前已通关的city
    optional int32       stagePass              = 17; // 当前已通关的stage
}

// 玩家指引步骤
enum UserGuideStep {
    STEP_TEACH                                  = 1;  // 第一场战斗，教学关：基础战斗教学
    STEP_QUEST_GOAL                             = 2;  // 第二场战斗，战场第1关（Id:111），熟悉一次基础战斗、明确通关目标
    STEP_QUEST_PSKILL                           = 3;  // 第三场战斗，战场第2关（Id:112），指引玩家使用主动技能
    STEP_SUMMON                                 = 4;  // 通关第9关(id:133)后，指引玩家抽卡，抽卡之后指引编队
    STEP_POWER_UP                               = 5;  // 在玩家通关第12关(id:143)后，触发强化指引
    STEP_COLOR_BLOCK                            = 6;  // 第五场战斗，进入第15关时（Id:153），指导玩家对色块进行排序、同时拖动多个色块、利用BOOST的技巧以及SP和探索
}

// 玩家指引api response
message RspUserGuideStep {
    optional ProtoHeader    header              = 1;
    optional UserGuideStep  step                = 2;
}
