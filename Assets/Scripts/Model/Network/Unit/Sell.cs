// ------------------------------------------------------------------------------

//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using bbproto;

public class SellUnit: ProtoManager {
    // req && rsp
    private bbproto.ReqSellUnit reqSellUnit;
    private bbproto.RspSellUnit rspSellUnit;

    
    private List<uint> unitUniqueIdList;


    public List<uint> UnitUniqueIdList { get { return unitUniqueIdList; } set { unitUniqueIdList = value; } }

    
    public SellUnit() {
    }
    
    ~SellUnit() {
    }

    public static void SendRequest(DataListener callback, List<uint> unitUniqueIdList) {
        SellUnit sellUnit = new SellUnit();
        sellUnit.UnitUniqueIdList = unitUniqueIdList;
        sellUnit.OnRequest(null, callback);
    }

    public static void SendRequest(DataListener Callback, params uint[] unitUniqueIdArray) {
        List<uint> unitUniqueIdList = new  List<uint>();
        unitUniqueIdList.AddRange(unitUniqueIdArray);
    }
    
    //Property: request server parameters
    
    //make request packet==>TODO rename to request
    public override bool MakePacket() {
        Proto = Protocol.SELL_UNIT;
        reqType = typeof(ReqSellUnit);
        rspType = typeof(RspSellUnit);
        
        reqSellUnit = new ReqSellUnit();
        reqSellUnit.header = new ProtoHeader();
        reqSellUnit.header.apiVer = Protocol.API_VERSION;
        reqSellUnit.header.userId = DataCenter.Instance.UserInfo.UserId;
        
        //request params
        CollectionHelper.ResetReadOnlyList(reqSellUnit.unitUniqueId, unitUniqueIdList);

        
        //        reqSellUnit.partUniqueId
        
        ErrorMsg err = SerializeData(reqSellUnit); // save to Data for send out
        
        return (err.Code == (int)ErrorCode.SUCCESS);
    }
    
    private void OnRspSellUnit(object data) {
        if (data == null)
            return;
        
        LogHelper.Log("OnRspSellUnit() begin");
        LogHelper.Log(data);
        bbproto.RspSellUnit rsp = data as bbproto.RspSellUnit;
        
        if (rsp.header.code != (int)ErrorCode.SUCCESS) {
            LogHelper.Log("RspSellUnit code:{0}, error:{1}", rsp.header.code, rsp.header.error);
            return;
        }

        int money = rsp.money;
        int gotMoney = rsp.gotMoney;
        List<UserUnit> unitList = rsp.unitList;
        // TODO do evolve start over;
        LogHelper.Log("OnRspSellUnit() finished, money {0}, gotMoney {1}, unitList {2}"
                      , money, gotMoney, unitList);

        // record
        DataCenter.Instance.AccountInfo.Money = rsp.money;

        LogHelper.LogError("before sell, userUnitList count {0}", DataCenter.Instance.MyUnitList.GetAll().Count);
        // delete unit;
        DataCenter.Instance.MyUnitList.DelMyUnitList(unitUniqueIdList);
//        foreach (uint unitUniqueId in unitUniqueIdList) {
//            LogHelper.LogError("====================sell unit, so remove it , uniqueId {0}============", unitUniqueId);
//            DataCenter.Instance.MyUnitList.DelMyUnit(unitUniqueId);
//        }

        LogHelper.LogError("after sell, userUnitList count {0}", DataCenter.Instance.MyUnitList.GetAll().Count);
    }
}


public class NetWorkSellUnitTester {
    private List<uint> unitUniqueIdList;
    public NetWorkSellUnitTester() {
        
    }
}
