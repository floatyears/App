// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using bbproto;



public class EvolveStart: ProtoManager {
    // req && rsp
    private bbproto.ReqEvolveStart reqEvolveStart;
    private bbproto.RspEvolveStart rspEvolveStart;

    public uint BaseUnitId { set { baseUnitId = value; } }
    public List<uint> PartUnitId { get { return partUnitId; } set { partUnitId = value; } }
    public uint HelperUserId { set { helperUserId = value; } }
    public UserUnit HelperUnit { get { return helperUnit; } set { helperUnit = value; } }
    public int HelperPremium { set { helperPremium = value; } }
    public uint EvolveQuestId { set { evolveQuestId = value; } }
    
    private uint baseUnitId;
    private List<uint> partUnitId;
    private uint helperUserId;
    private UserUnit helperUnit;
    private int helperPremium;
    private uint evolveQuestId;
    
    public EvolveStart() {
    }
    
    ~EvolveStart () {
    }
    
    //Property: request server parameters

    //make request packet==>TODO rename to request
    public override bool MakePacket() {
        Proto = Protocol.EVOLVE_START;
        reqType = typeof(ReqEvolveStart);
        rspType = typeof(RspEvolveStart);
        
        reqEvolveStart = new ReqEvolveStart();
        reqEvolveStart.header = new ProtoHeader();
        reqEvolveStart.header.apiVer = Protocol.API_VERSION;
        reqEvolveStart.header.userId = DataCenter.Instance.UserInfo.UserId;
        
        //request params
        reqEvolveStart.baseUniqueId = baseUnitId;
        CollectionHelper.ResetReadOnlyList(reqEvolveStart.partUniqueId, partUnitId);
        reqEvolveStart.helperUserId = helperUserId;
        reqEvolveStart.helperUnit = helperUnit;
        reqEvolveStart.helperPremium = helperPremium;
        reqEvolveStart.evolveQuestId = evolveQuestId;

//        reqEvolveStart.partUniqueId
        
        ErrorMsg err = SerializeData(reqEvolveStart); // save to Data for send out
        
        return (err.Code == (int)ErrorCode.SUCCESS);
    }

    private void OnRspEvolveStart(object data) {
        if (data == null)
            return;
        
        LogHelper.Log("ReqEvolveStart() begin");
        LogHelper.Log(data);
        bbproto.RspEvolveStart rsp = data as bbproto.RspEvolveStart;
        
        if (rsp.header.code != (int)ErrorCode.SUCCESS) {
            LogHelper.Log("ReqEvolveStart code:{0}, error:{1}", rsp.header.code, rsp.header.error);
            return;
        }
        
        // TODO do evolve start over;
        int staminaNow = rsp.staminaNow;
        uint staminaRecover = rsp.staminaRecover;
        bbproto.QuestDungeonData questDungeonData = rsp.dungeonData;
        LogHelper.Log("OnRspEvolveStart() finished, staminaNow {0}, staminaRecover {1}," +
            "questDungeonData.boss {2}", staminaNow, staminaRecover, questDungeonData.boss);
    }
}


public class EvolveDone: ProtoManager {
    // req && rsp
    private ReqEvolveDone reqEvolveDone;
    private RspEvolveDone rspEvolveDone;
    
    public uint QuestId { set { questId = value; } }
    public uint SecurityKey { set { securityKey = value; } }
    public int GetMoney { set { getMoney = value; } }
    public List<uint> GetUnit { get { return getUnit; } set { getUnit = value; } }
    public List<uint> HitGrid { get { return HitGrid; } set { HitGrid = value; } }
    
    private uint questId;
    private uint securityKey;
    private int getMoney;
    private List<uint> getUnit;
    private List<uint> hitGrid;
    
    public EvolveDone() {
    }
    
    ~EvolveDone () {
    }
    
    //Property: request server parameters
    
    //make request packet==>TODO rename to request
    public override bool MakePacket() {
        Proto = Protocol.EVOLVE_END;
        reqType = typeof(ReqEvolveDone);
        rspType = typeof(RspEvolveStart);
        
        reqEvolveDone = new ReqEvolveDone();
        reqEvolveDone.header = new ProtoHeader();
        reqEvolveDone.header.apiVer = Protocol.API_VERSION;
        reqEvolveDone.header.userId = DataCenter.Instance.UserInfo.UserId;
        
        //request params
        reqEvolveDone.questId = questId;
        reqEvolveDone.securityKey = securityKey;
        reqEvolveDone.getMoney = getMoney;
        CollectionHelper.ResetReadOnlyList(reqEvolveDone.getUnit, getUnit);
        CollectionHelper.ResetReadOnlyList(reqEvolveDone.hitGrid, hitGrid);

        //        reqEvolveStart.partUniqueId
        
        ErrorMsg err = SerializeData(reqEvolveDone); // save to Data for send out
        
        return (err.Code == (int)ErrorCode.SUCCESS);
    }
    private void OnRspEvolveDone(object data) {
        if (data == null)
            return;
            
        LogHelper.Log("OnRspEvolveDone() begin");
        LogHelper.Log(data);
        bbproto.RspEvolveDone rsp = data as bbproto.RspEvolveDone;
            
        if (rsp.header.code != (int)ErrorCode.SUCCESS) {
            LogHelper.Log("ReqEvolveDone code:{0}, error:{1}", rsp.header.code, rsp.header.error);
            return;
        }
            
        // TODO do evolve start over;
        LogHelper.Log("OnRspEvolveDone() finished, rank {0}, exp {1}," +
            "money {2}, friendPoint {3}, staminaNow {4}, staminaMax {5}, staminaRecover {6}" +
            "gotMoney {7}, gotChip {8}, gotFriendPoint {9}, gotUnit {10}, evolvedUnit {11}"
                      , rsp.rank, rsp.exp, rsp.money, rsp.friendPoint, rsp.staminaNow, rsp.staminaMax,
                      rsp.staminaRecover, rsp.gotMoney, rsp.gotStone, rsp.gotFriendPoint, rsp.gotUnit, rsp.evolvedUnit);
        DataCenter.Instance.UserInfo.Rank = rsp.rank;
        DataCenter.Instance.UserInfo.Exp = rsp.exp;
        DataCenter.Instance.AccountInfo.Money = rsp.money;
        DataCenter.Instance.AccountInfo.FriendPoint = rsp.friendPoint;
        DataCenter.Instance.UserInfo.StaminaNow = rsp.staminaNow;
        DataCenter.Instance.UserInfo.StaminaMax = rsp.staminaMax;
        DataCenter.Instance.UserInfo.StaminaRecover = rsp.staminaRecover;
    }
}

public class NetWorkEvovleTester {
    public void TestEvovleStart() {
        EvolveStart evolveStart = new EvolveStart();
        evolveStart.BaseUnitId = 1;
//        evolveStart.EvolveQuestId = EvolveComponent.GetEvolveQuestID(2, EvolveComponent.GetEvolveStageID());

//        List <uint> partUnitIdList = new List<uint>();
//        partUnitIdList.Add(11);
//        partUnitIdList.Add(12);
//        evolveStart.PartUnitId = partUnitIdList;
//
//        evolveStart.HelperPremium = 0;
//        Debug.Log(string.Format("TestEvovleStart(), evolve count {0}", DataCenter.Instance.SupportFriends.Count));
//        TFriendInfo friend = DataCenter.Instance.SupportFriends[0];
//        evolveStart.HelperUnit = friend.UserUnit;
//        evolveStart.HelperUserId = friend.UserId;

        evolveStart.OnRequest(null, OnRspEvolveStart);
    }

    private void OnRspEvolveStart(object data) {
        if (data == null)
            return;
        
        LogHelper.Log("ReqEvolveStart() begin");
        LogHelper.Log(data);
        bbproto.RspEvolveStart rsp = data as bbproto.RspEvolveStart;
        
        if (rsp.header.code != (int)ErrorCode.SUCCESS) {
            LogHelper.Log("ReqEvolveStart code:{0}, error:{1}", rsp.header.code, rsp.header.error);
            return;
        }
        
        // TODO do evolve start over;
        int staminaNow = rsp.staminaNow;
        uint staminaRecover = rsp.staminaRecover;
        bbproto.QuestDungeonData questDungeonData = rsp.dungeonData;
        LogHelper.Log("OnRspEvolveStart() finished, staminaNow {0}, staminaRecover {1}," +
            "questDungeonData.boss {2}", staminaNow, staminaRecover, questDungeonData.boss);
    }

    public static void TestEvovleDone() {

    }
}


