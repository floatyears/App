// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using bbproto;
using UnityEngine;
using System.Collections.Generic;


public class LoadingLogic : ConcreteComponent {
    
    public LoadingLogic(string uiName):base(uiName) {}
    
    public override void CreatUI () {
        base.CreatUI ();
    }
    
    public override void ShowUI () {
        base.ShowUI ();

    }
    
    public override void HideUI () {
        base.HideUI ();
    }

    public void StartLogin(){
        INetBase netBase = new AuthUser();
        netBase.OnRequest(null, LoginSuccess);
    }

    void LoginSuccess(object data) {
        if (data != null) {
            bbproto.RspAuthUser rspAuthUser = data as bbproto.RspAuthUser;
            if (rspAuthUser == null) {
                LogHelper.Log("authUser response rspAuthUser == null");
                return;
            }
            
            if (rspAuthUser.header.code != 0) {
                //TODO: showErrMsg()
                LogHelper.Log("rspAuthUser return error: {0} {1}", rspAuthUser.header.code, rspAuthUser.header.error);
                return;
            }
            
            uint userId = rspAuthUser.user.userId;
            
            if (rspAuthUser.isNewUser == 1) {
                LogHelper.Log("New user registeed, save userid:" + userId);
                GameDataStore.Instance.StoreData(GameDataStore.USER_ID, rspAuthUser.user.userId);
            }
            
            //TODO: update localtime with servertime
            //localTime = rspAuthUser.serverTime
            
            //save to GlobalData
            if (rspAuthUser.account != null) {
                DataCenter.Instance.AccountInfo = new TAccountInfo(rspAuthUser.account);
            }
            
            if (rspAuthUser.user != null) {
                DataCenter.Instance.UserInfo = new TUserInfo(rspAuthUser.user);
                if (rspAuthUser.evolveType != null) {
                    DataCenter.Instance.UserInfo.EvolveType = rspAuthUser.evolveType;
                }
                
                LogHelper.Log("authUser response userId:" + rspAuthUser.user.userId);
            }
            else {
                LogHelper.Log("authUser response rspAuthUser.user == null");
            }
            
            if (rspAuthUser.friends != null) {
                LogHelper.Log("rsp.friends have {0} friends.", rspAuthUser.friends.Count);
                DataCenter.Instance.SupportFriends = new List<TFriendInfo>();
                //              Debug.LogError(rspAuthUser.friends.Count);
                foreach (FriendInfo fi in rspAuthUser.friends) {
                    TFriendInfo tfi = new TFriendInfo(fi);
                    DataCenter.Instance.SupportFriends.Add(tfi);
                }
            }
            else {
                LogHelper.Log("rsp.friends==null");
            }
            
            if (rspAuthUser.unitList != null) {
                foreach (UserUnit unit in rspAuthUser.unitList) {
                    DataCenter.Instance.MyUnitList.Add(userId, unit.uniqueId, new TUserUnit(unit));
                    DataCenter.Instance.UserUnitList.Add(userId, unit.uniqueId, new TUserUnit(unit));
                }
                LogHelper.Log("rspAuthUser add to myUserUnit.count: {0}", rspAuthUser.unitList.Count);
            }
            
            if (rspAuthUser.party != null && rspAuthUser.party.partyList != null) {
                DataCenter.Instance.PartyInfo = new TPartyInfo(rspAuthUser.party);
                
                //TODO: replace ModelManager.GetData(UnitPartyInfo) with DataCenter.Instance.PartyInfo.CurrentParty
                ModelManager.Instance.SetData(ModelEnum.UnitPartyInfo, DataCenter.Instance.PartyInfo.CurrentParty);
            }
            
            if (rspAuthUser.questClear != null) {
                DataCenter.Instance.QuestClearInfo = new TQuestClearInfo(rspAuthUser.questClear);
            }
            
            TestUtility.Test();
        }
        Debug.Log("UIManager.Instance.ChangeScene before");
        
        //      Debug.LogError("login end");
        UIManager.Instance.ChangeScene(SceneEnum.Start);
//        TurnToReName();
        
    }

    void TurnToReName() {
        //      Debug.Log("PlayerInfoBar.TurnToReName() : Start");
        if (DataCenter.Instance.UserInfo == null) {
            Debug.LogError("DataCenter.Instance.UserInfo is null");
            return;
        }
        
        if (DataCenter.Instance.UserInfo.NickName == null) {
            Debug.LogError("DataCenter.Instance.UserInfo.NickName is null");
            return;
        }
        
        if (DataCenter.Instance.UserInfo.NickName.Length == 0) {
            UIManager.Instance.ChangeScene(SceneEnum.Others);
            Debug.Log("PlayerInfoBar.ChangeScene( Others ).");
        }
        
        Debug.Log("PlayerInfoBar.TurnToReName() : End. NickName is " + DataCenter.Instance.UserInfo.NickName);
    }
}