// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using ProtoBuf;

public delegate object PostCallbackFailed(string rspError, ErrorMsg errorMsg, params object[] values); 
public delegate object PostCallbackSucceed<T>(T instance, ErrorMsg errorMsg, params object[] values); 

public delegate object GetCallbackFailed(string rspError, ErrorMsg errorMsg, params object[] values);
public delegate object GetCallbackSucceed(byte[] response, ErrorMsg errorMsg, params object[] values); 


/// <summary>
/// Http client.
/// </summary>
public class HttpClient
{

    private static HttpClient instance;
    public static HttpClient Instance
    {
        get
        {
            if(instance  == null)
                instance = new HttpClient();
            
            return instance;
        }
    }

    /// <summary>
    /// The session identifier.
    /// </summary>
    private string sessionId = "";
    public string SessionId
    {
        get { return sessionId; }
        set { sessionId = value; }
    }
    

    /// <summary>
    /// Validates the session identifier.
    /// </summary>
    /// <returns>The session identifier.</returns>
    /// <param name="protobufModel">Protobuf model.</param>
    public ErrorMsg ValidateSessionId(object protobufModel){
        ErrorMsg errMsg = new ErrorMsg();
        Type t = protobufModel.GetType();
        try {
            string protoSessionId = (string)t.GetProperty("sessionId").GetValue(protobufModel, null);
            if (protoSessionId != sessionId){
                errMsg.Code = ErrorCode.InvalidSessionId;
            }
        } catch (Exception ex) {
            errMsg.Code = ErrorCode.IllegalParam;
            errMsg.Msg = "request or response not has field sessionId";
        }
        return errMsg;
    }

    /// <summary>
    /// Position the specified url, buffer, failedFunc, succeedFunc and errorMsg.
    /// </summary>
    /// <param name="url">URL.</param>
    /// <param name="buffer">Buffer.</param>
    /// <param name="failedFunc">Failed func.</param>
    /// <param name="succeedFunc">Succeed func.</param>
    /// <param name="errorMsg">Error message.</param>
    /// <typeparam name="T">The 1st type parameter.</typeparam>
    IEnumerator POST<T>(string url, byte[] buffer, PostCallbackFailed failedFunc, PostCallbackSucceed<T> succeedFunc, ErrorMsg errorMsg, params object[] values)
    {

        LogHelper.Log("send:" + buffer + ", length of bytes sended: " + buffer.Length);
        WWW www = new WWW(url, buffer);
        yield return www;

        // when return
        if (www.error != null)
        {
            // POST request faild
            LogHelper.Log("error is :"+ www.error);
            failedFunc(www.error, errorMsg, values);
            // TODO: record error code
        } else
        {
            // POST request succeed
            LogHelper.Log("request ok : text is " + www.bytes);

            // deserilize
            T instance = ProtobufSerializer.ParseFormBytes<T>(www.bytes);
            // parse to current instance
            if (instance != null){
                succeedFunc(instance, errorMsg, values);
            }
        }
    }

    /// <summary>
    /// GE the specified url, failedFunc, succeedFunc and errorMsg.
    /// </summary>
    /// <param name="url">URL.</param>
    /// <param name="failedFunc">Failed func.</param>
    /// <param name="succeedFunc">Succeed func.</param>
    /// <param name="errorMsg">Error message.</param>
    IEnumerator GET(string url, GetCallbackFailed failedFunc, GetCallbackSucceed succeedFunc, ErrorMsg errorMsg, params object[] values)
    {
        WWW www = new WWW(url);
        yield return www;

        // deal
        if (www.error != null)
        {
            // POST request faild
            LogHelper.Log("error is :"+ www.error);
            failedFunc(www.error, errorMsg, values);
            // TODO: record error code
        } else
        {
            // POST request succeed
            LogHelper.Log("request ok : text is " + www.bytes);
            succeedFunc(www.bytes, errorMsg, values);
        }
    }

    /// <summary>
    /// Sends the post.
    /// </summary>
    /// <param name="sender">Sender.</param>
    /// <param name="url">URL.</param>
    /// <param name="instance">Instance.</param>
    /// <param name="failedFunc">Failed func.</param>
    /// <param name="succeedFunc">Succeed func.</param>
    /// <param name="errorMsg">Error message.</param>
    /// <typeparam name="T">The 1st type parameter.</typeparam>
    public void sendPost<T>(MonoBehaviour sender, string url, T instance, PostCallbackFailed failedFunc, PostCallbackSucceed<T> succeedFunc, ErrorMsg errorMsg, params object[] values){

        // validate
        if (url == null || url == ""){
            LogHelper.Log("request url is" + url + ", error code is " + ErrorCode.IllegalParam);
            errorMsg.Code = ErrorCode.IllegalParam;
            errorMsg.Msg = "request url is null";
            return;
        }


        // validate func arguments
        else if (failedFunc == null || succeedFunc == null){
            errorMsg.Code = ErrorCode.IllegalParam;
            if (failedFunc == null ){
                errorMsg.Msg = "response failed callback is null, ErrorCode";
                LogHelper.Log("response failed callback is null, ErrorCode" + ErrorCode.IllegalParam);
            }
            else {
                errorMsg.Msg = "response succeed callback is null, ErrorCode";
                LogHelper.Log("response succeed callback is null, ErrorCode" + ErrorCode.IllegalParam);
            }
            return;
        }

        else {
            byte[] sendBytes = ProtobufSerializer.SerializeToBytes<T>(instance);
            if (sendBytes == null){
                errorMsg.Code = ErrorCode.IllegalParam;
                errorMsg.Msg = "Serializer get invalid instance";
                return;
            }
            sender.StartCoroutine(POST<T>(url, sendBytes, failedFunc, succeedFunc, errorMsg, values));
        }
    }

}
