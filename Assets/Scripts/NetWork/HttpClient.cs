// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Utility;

namespace NetWork
{
    /// <summary>
    /// Http client.
    /// </summary>
	public class HttpClient
	{
        #region delegates
        public delegate ErrorCode ResponseCallback(string responseString); 
        #endregion

		public HttpClient ()
		{
		}

        /// <summary>
        /// Position the specified url, buffer, failedCallback and succeedCallback.
        /// </summary>
        /// <param name="url">URL.</param>
        /// <param name="buffer">Buffer.</param>
        /// <param name="failedCallback">Failed callback.</param>
        /// <param name="succeedCallback">Succeed callback.</param>
        IEnumerator POST(string url, byte[] buffer, ResponseCallback failedCallback, ResponseCallback succeedCallback)
        {
            Debug.Log("send:" + buffer + ", length of bytes sended: " + buffer.Length);
            WWW www = new WWW(url, buffer);
            yield return www;
            if (www.error != null)
            {
                // POST request faild
                Debug.Log("error is :"+ www.error);
                failedCallback(www.error);
                // TODO: record error code
            } else
            {
                // POST request succeed
                Debug.Log("request ok : text is " + www.text);
            }
        }

        bool startPost<T>(string url, object instance){
            if (!url || url == ""){
                Debug.Log("url, error code is " + ErrorCode.IllegalParam);
                return false;
            }
            else {
                byte[] sendBytes = ProtobufSerializer.SerializeToBytes<T>(instance);
                if (sendBytes != null){
                    return true;
                }
            }if (ProtobufSerializer.SerializeToBytes<T>(instance))
            return true;
        }
	}
}
