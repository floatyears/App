// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Text;
using System.Security.Cryptography;
using System.IO;

using UnityEngine;

public class StringEncryption{
    
    #region DES
    private static byte[] Keys = { 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF };
    public const int CRYPTO_KEY_LENGTH = 8;
    /// <summary>
    /// DES encryption
    /// </summary>
    /// <param name="encryptString">encrption string for</param>
    /// <param name="encryptKey">required: 8bit</param>
    /// <param name="errorMsg">for errorMsg</param>
    /// <returns>succeed: encrypted String; failed: source string</returns>
    public static string EncryptDES(string encryptString, string encryptKey, ErrorMsg errorMsg)
    {
        string result = encryptString;

        if (encryptString == null || encryptKey == null || encryptKey.Length < CRYPTO_KEY_LENGTH){
            errorMsg.Code = ErrorCode.IllegalParam;
            errorMsg.Msg = "string encrpt get illegal encryptString or encryptKey";
            return result;
        }

        try
        {
            byte[] rgbKey = Encoding.UTF8.GetBytes(encryptKey.Substring(0, CRYPTO_KEY_LENGTH));
            byte[] rgbIV = Keys;
            byte[] inputByteArray = Encoding.UTF8.GetBytes(encryptString);
            DESCryptoServiceProvider dCSP = new DESCryptoServiceProvider();
            MemoryStream mStream = new MemoryStream();
            CryptoStream cStream = new CryptoStream(mStream, dCSP.CreateEncryptor(rgbKey, rgbIV), CryptoStreamMode.Write);
            cStream.Write(inputByteArray, 0, inputByteArray.Length);
            cStream.FlushFinalBlock();
            cStream.Close();
            result = Convert.ToBase64String(mStream.ToArray());
            errorMsg.Code = ErrorCode.Succeed;
        }
        catch
        {
            errorMsg.Code = ErrorCode.Encrypt;
        }
        return result;
    }
    
    /// <summary>
    /// DES decryption
    /// </summary>
    /// <param name="decryptString">encrypted string</param>
    /// <param name="decryptKey">decryptKey, 8bit, same as encryptKey</param>
    /// <param name="errorMsg">for errorMsg</param>
    /// <returns>succeed: decrypted string; failed: source string</returns>
    public static string DecryptDES(string decryptString, string decryptKey, ErrorMsg errorMsg)
    {
        string result = decryptString;

        if (decryptString == null || decryptKey == null || decryptKey.Length < CRYPTO_KEY_LENGTH){
            errorMsg.Code = ErrorCode.IllegalParam;
            errorMsg.Msg = "string encrpt get illegal decryptString or decryptKey";
            return result;
        }

        try
        {
            byte[] rgbKey = Encoding.UTF8.GetBytes(decryptKey);
            byte[] rgbIV = Keys;
            byte[] inputByteArray = Convert.FromBase64String(decryptString);
            DESCryptoServiceProvider DCSP = new DESCryptoServiceProvider();
            MemoryStream mStream = new MemoryStream();
            CryptoStream cStream = new CryptoStream(mStream, DCSP.CreateDecryptor(rgbKey, rgbIV), CryptoStreamMode.Write);
            cStream.Write(inputByteArray, 0, inputByteArray.Length);
            cStream.FlushFinalBlock();
            cStream.Close();
            result = Encoding.UTF8.GetString(mStream.ToArray());
            errorMsg.Code = ErrorCode.Succeed;
        }
        catch
        {
            errorMsg.Code = ErrorCode.Decrypt;
            Debug.Log("catch");
        }
        return result;
    }
    #endregion
    

    #region MD5
    //32 bit
    public string GetMD5_32(string s, string _input_charset) 
    { 
        MD5 md5 = new MD5CryptoServiceProvider(); 
        byte[] t = md5.ComputeHash(Encoding.GetEncoding(_input_charset).GetBytes(s)); 
        StringBuilder sb = new StringBuilder(32); 
        for (int i = 0; i < t.Length; i++) 
        { 
            sb.Append(t[i].ToString("x").PadLeft(2, '0')); 
        } 
        return sb.ToString(); 
    } 
    
    // 16 bit
    public static string GetMd5_16(string ConvertString) 
    { 
        MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider(); 
        string t2 = BitConverter.ToString(md5.ComputeHash(UTF8Encoding.Default.GetBytes(ConvertString)), 4, 8); 
        t2 = t2.Replace("-", ""); 
        return t2; 
    }
    #endregion
}