enum EUnitType{
	UALL	= 0; // all type
	UFIRE 	= 1;
	UWATER	= 2;
	UWIND	= 3;
	ULIGHT	= 4;
	UDARK	= 5;
	UNONE	= 6;
    UHeart  = 7;
};

enum ETrapType {
	Move			= 0;
	StateException	= 1;
	ChangeEnvir		= 2;
	Injured			= 3;
};

enum EValueType{
	FIXED 			= 1;
	MULTIPLE		= 2;
	PERCENT			= 3;
	SECOND			= 4;
	ROUND			= 5;
	COLORTYPE		= 6;
	RANDOMCOLOR		= 7;
};

enum EAttackType {
	ATK_SINGLE		= 0;
	ATK_ALL			= 1;
	RECOVER_HP		= 2;
};

enum EBoostType {
	BOOST_ATTACK	= 0;
	BOOST_HP		= 1;
};

enum EBoostTarget {
	UNIT_RACE		= 0;
	UNIT_TYPE		= 1;
};

enum EPeriod {
	EP_RIGHT_NOW	= 0; 
	EP_EVERY_ROUND	= 1; // every round 
	EP_EVERY_STEP 	= 2; // every moving step
};

message SkillBase {
    optional int32	id				= 1;
    optional string	name			= 2;
    optional string	description		= 3;
	optional int32	skillCooling	= 4;
}


message SkillSingleAttack {
    optional SkillBase		baseInfo		= 1;
	optional EValueType		type 			= 2; //FIXED | MULTIPLE
	optional float			value			= 3; //fixed:1000,10000,150000 | 100xATK
	optional EUnitType		unitType 		= 4; //
	optional EAttackType	attackRange		= 5; // attack single, attack all, recover hp.
	optional bool			ignoreDefense	= 6; // ignore enemy defense.
};


message SkillSingleAtkRecoverHP { //single attack & recover HP to 100%
    optional SkillBase  baseInfo    = 1;
	optional EValueType	type		= 2; 	    // MULTIPLE
	optional float		value		= 3; 	 	// 0.5x,1x,2x,3x,5x
	optional EUnitType	unitType	= 4;
};

message SkillSuicideAttack { //attack target and HP reduce to 1
    optional SkillBase      baseInfo    = 1;
	optional EValueType		type	    = 2;	// 1:single | 2:all
	optional float			value	    = 3;		// fixed:1000,10000,150000 | 100xATK
	optional EUnitType		unitType	= 4;
	optional EAttackType	attackType	= 5;
};

message SkillTargetTypeAttack { //only attack target type
    optional SkillBase      baseInfo		= 1;
	optional EValueType		type			= 2;	// 1:fixed 2:multiple
	optional float			value			= 3;		// 35000, 1.5x
	optional EUnitType		targetUnitType	= 5;
	optional EUnitType		hurtUnitType	= 6;
};

message SkillStrengthenAttack {
	optional SkillBase		baseInfo		= 1;
	optional EValueType		type			= 2;
	optional float			value			= 3;
	optional int32			periodValue		= 4;
	optional EUnitType		targetType		= 5;
}

message SkillKillHP { //kill all people's HP
    optional SkillBase  baseInfo    = 1;
	optional EValueType		type	= 2; 	// 3:percent
	optional float			value	= 3; 	// in percent: 11=11%, 15=15%, 30=30%
};

message SkillRecoverHP { 
    optional SkillBase  baseInfo    = 1;
	optional EValueType	type		= 2;   // FIXED, PERCENT
	optional float 		value		= 3;  //
	optional EPeriod 	period		= 4; // optional: 1:every round 2:every moving step
};

message SkillRecoverSP { 
    optional SkillBase  baseInfo    = 1;
	optional EValueType	type		= 2;    // FIXED
	optional float 		value		= 3;    // in step
};

message SkillReduceHurt { //reduce hurt x percent
    optional SkillBase  baseInfo    = 1;
	optional EValueType	type		= 2;		// 3:percent
	optional float 		value		= 3;		// in percent: 11=11%, 15=15%, 30=30%
	optional EPeriod    period		= 4; 	    // 
    optional int32      periodValue = 5;        //valid period ->  0:all time, 1: 1 round, n: n rounds...
	optional EUnitType	unitType	= 6;	    // target unit type
};

message SkillReduceDefence { 
    optional SkillBase  baseInfo    = 1;
	optional EValueType	type		= 2;  //PERCENT
	optional float 		value		= 3; //in step
	optional int32 		period		= 4; //valid period ->  0:all time, 1: 1 round, n: n rounds...	
};

message SkillDeferAttackRound { //defer enemy attack
    optional SkillBase	baseInfo     = 1;
	optional EValueType	type		= 2;  //ROUND
	optional float 		value		= 3;
};

message SkillPoison { //defer enemy attack
	optional SkillBase	baseInfo    = 1;
	optional EValueType	type		= 2;  //ROUND
	optional float 		value		= 3;
	optional int32		roundValue	= 4;
	
};

message SkillDelayTime { //increase time for moving color block
    optional SkillBase  baseInfo    = 1;
	optional EValueType	type		= 2;  //SECOND
	optional float 		value		= 3; //1s, 2s
	optional int32		periodValue	= 4;
};

message SkillConvertUnitType { //convert one type to another type
    optional SkillBase  baseInfo    = 1;
	optional EValueType	type		= 2;  //COLORTYPE | RANDOMCOLOR
	optional EUnitType 	unitType1	= 3;  //from type
	optional EUnitType 	unitType2	= 4;  //target type
};

message SkillDodgeTrap {
        optional SkillBase	baseInfo    = 1;
		optional int32		trapLevel	= 2;
		optional ETrapType	trapType	= 3;
};

message SkillAntiAttack {
		optional SkillBase  baseInfo        = 1;
		optional EUnitType	attackSource	= 3;
		optional EUnitType	antiAttack		= 4;
		optional float		probability 	= 2;
		optional float		antiAtkRatio	= 5;
};


message NormalSkill {
	optional SkillBase      baseInfo        = 1;

	optional EAttackType    attackType      = 2; //SINGLE,ALL,RECOVER_HP
	repeated uint32         activeBlocks    = 3; //[0,0],[1,1,1] => [Fire,Fire],[Water,Water,Water]
	optional float          attackValue     = 4; //1.5xATK | 10%
    optional EUnitType      attackUnitType  = 5; //EUnitType 
};

message SkillBoost {
	optional SkillBase		baseInfo    = 1;
	optional EBoostType 	boostType	= 2; // BOOST_ATTACK | BOOST_HP
	optional float 			boostValue	= 3; // 1.5x, 2.0x
	optional EBoostTarget	targetType	= 4; // UNIT_RACE | UNIT_TYPE
	optional int32 			targetValue = 5; // target race
};

message SkillExtraAttack {
	optional SkillBase	baseInfo	= 1;
	optional EUnitType	unitType	= 2; //target unit type
	optional float		attackValue	= 3; //1.5x, 2.0x, 2.5x
};

message SkillMultipleAttack {
	optional SkillBase	baseInfo		= 1;
	optional int32		unitTypeCount	= 2;
	optional float		value			= 3;
}

message AllSkillConfig {
	repeated NormalSkill				Normal					= 1;

	//active skill
	repeated SkillSingleAttack			SingleAttack			= 2;
	repeated SkillSingleAtkRecoverHP	SingleAtkRecoverHP		= 3;
	repeated SkillSuicideAttack			SuicideAttack			= 4;
	repeated SkillTargetTypeAttack		TargetTypeAttack		= 5;
	repeated SkillStrengthenAttack		StrengthenAttack		= 6;
	repeated SkillKillHP				KillHP					= 7;
	repeated SkillRecoverHP				RecoverHP				= 8;
	repeated SkillRecoverSP				RecoverSP				= 9;
	repeated SkillReduceHurt			ReduceHurt				= 10;
	repeated SkillReduceDefence			ReduceDefence			= 11;
	repeated SkillDeferAttackRound		DeferAttackRound		= 12;
	repeated SkillPoison				Poison					= 13;
	repeated SkillDelayTime				DelayTime				= 14;
	repeated SkillConvertUnitType		ConvertUnitType			= 15;
	
  //passive skill
	repeated SkillDodgeTrap				DodgeTrap				= 16;
	repeated SkillAntiAttack			AntiAttack				= 17;

	//leader skill
	repeated SkillBoost					Boost					= 18;
	repeated SkillExtraAttack			Extraattack				= 19;
	repeated SkillMultipleAttack		MultipleAttack			= 20;
}


